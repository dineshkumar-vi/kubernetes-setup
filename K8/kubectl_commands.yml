Create:
  describe: kubectl describe pod newpods-8kv2x
  yml: kubectl create -f redis-pod.yml
Extract:
  pod-defintion: kubectl get pod <pod-name> -o yaml > pod-definition.yaml
Edit:
  edit: kubectl edit pod ${pod-name-redis}
deployment: kubectl run blue --image=nginx --replicas=6

Get:
  default: kubectl get pods
  wide: kubectl get pods -o wide

getALL: kubectl get all

Delete:
  default: kubectl delete pod webapp
clear
Replicaset:
  create: kubectl create -f replicaset-definition.yml
  edit: kubectl edit {name}
  scale:
    byDef: kubectl scale --replicas=6 replicaset-definition.yml
    replace: kubectl replace -f ricaset-definition.yml
    byName: kubectl scale --replicas=6 replicaset myapp-replicaset
  get: kubectl get replicaset
  delete: kubectl delete replicaset
  deleteByName: kubectl delete replicaset myapp-replicaset
  Describe: kubectl describe replicaset/{name}

Deployment:
  create: kubectl create -f deployment-definition.yml
  get: kubectl get deployments

namesp
  get: kubectl get pods --namespace={name space}
  create: kubectl create -f pod-def.yaml --namespace=dev

Secret: kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123
Sec: kubectl exec ubuntu-sleeper whoami
serviceAccount:
  create: kubectl create serviceaccount jenkins
  get: kubectl get serviceaccount
  describe-secret: kubectl describe secret <Secret Name>

Resources:
  requests:
    cpu: 1 GCP core / 1 AWS
    mem: 1GI
  limits:
    cpu: 2
    mem: 2

Taint:
  Create: kubectl taint nodes node-name key=value:taint-effect
  Remove: kubectl taint nodes master node-role.kubernetes.io/master:NoSchedule-
tolerations:
  - key:  taint key
    value: taint value
    effect: taint effect
    operator: Equal

NodeSelectore:
  create: kubectl label nodes node-1 size=Large
  Apply: kubectl label node node01 color=blue
NodeAffinity:

readinessProbe:
  httpGet:
    path: /api/ready
    port: 8080
  tcpSocket:
    port: 3306
  exec:
    commmand:
      - cat
      - /app/is_ready
  initialDealySeconds: 10
  periodSeconds: 5
livenessProbe:
  httpGet:
    path: /api/ready
    port: 8080
  tcpSocket:
    port: 3306
  exec:
    commmand:
      - cat
      - /app/is_ready
conatinerLogging:
  docker: docker logs -f containerId
  kubernetes: kubectl logs -f podname
  multiContainerLog: kubectl logs -f podname containerName

monitor:
  heapster:
  metricsServcer:
    enable:
      miniKube: minikube addons enable metrics-server
      others: Download metrics-server from https://github.com/kodekloudhub/kubernetes-metrics-server.git and install using kubectl create -f deploy/1.8+
    nodePerformance: kubectl top node
    podPerformance: kubectl top pod
Admin:
  base: kubeadm init

PodDesign:
  labelsSelectores:
    labels:
      app: App1
      function: Front-end
    get: kubectl get pods --selector app=App1
    multiSelector: kubectl get all --selector env=prod,bu=finance,tier=frontend

Deployment&Rollout:
  create: kubectl create -f deployment-def.ymal
  get: kubectl get deployments
  apply: kubectl apply -f deployment-definition.yaml
  set: kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1
  rollout: kubectl rollout status deployment/myapp-deployment
  history: kubectl rollout history deployment/myapp-deployment
  undo: kubectl rollout undo deployment/myapp-deployment

Jobs:
  docker: docker run ubuntu expr 3+2
  create: kubectl create -f job-definition.yaml
  get: kuebctl get jobs
  delete: kubectl delete job math-add-job

cronJobs:
  create: kubectl create -f cronjob-definition.yaml
  get: kuebctl get cronjobs

logs:
  get: kubectl logs math-add-job-id87pn

services:
  








